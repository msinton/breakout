
==================== FINAL INTERFACE ====================
2017-11-14 11:13:19.778712 UTC

interface breakout-0.1.0.0-KalZ2SmhAcs6JDFHIhjRIs:BreakoutGame 8002
  interface hash: f4c3fdcd071624bb196b273e9e82a57a
  ABI hash: a30430401e2d5b7afa76205ca12f3326
  export-list hash: 9c166df1b9417a0e21a755aed2043d7f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f1b0af2ea74f95b707eee0b9c87975b0
  sig of: Nothing
  used TH splices: False
  where
exports:
  BreakoutGame.BreakoutGame{BreakoutGame.Game ballLoc ballVel blocks keyLeft keyRight paddle paddleVel}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
53f0b20425bfcfef11dc221fb7a20a00
  $fShowBreakoutGame :: GHC.Show.Show BreakoutGame.BreakoutGame
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BreakoutGame.BreakoutGame
                  BreakoutGame.$fShowBreakoutGame_$cshowsPrec
                  BreakoutGame.$fShowBreakoutGame_$cshow
                  BreakoutGame.$fShowBreakoutGame_$cshowList -}
53f0b20425bfcfef11dc221fb7a20a00
  $fShowBreakoutGame1 :: BreakoutGame.BreakoutGame -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: BreakoutGame.BreakoutGame) ->
                 case w of ww { BreakoutGame.Game ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 BreakoutGame.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 ww6 ww7 }) -}
53f0b20425bfcfef11dc221fb7a20a00
  $fShowBreakoutGame_$cshow ::
    BreakoutGame.BreakoutGame -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U)),1*U(U),U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BreakoutGame.BreakoutGame) ->
                 BreakoutGame.$fShowBreakoutGame_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
53f0b20425bfcfef11dc221fb7a20a00
  $fShowBreakoutGame_$cshowList ::
    [BreakoutGame.BreakoutGame] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BreakoutGame.BreakoutGame
                   BreakoutGame.$fShowBreakoutGame1) -}
53f0b20425bfcfef11dc221fb7a20a00
  $fShowBreakoutGame_$cshowsPrec ::
    GHC.Types.Int -> BreakoutGame.BreakoutGame -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U)),1*U(U),U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: BreakoutGame.BreakoutGame) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { BreakoutGame.Game ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 BreakoutGame.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 ww8 ww9 } }) -}
d5db59b410ccbe0355f5f2c9ad39c4a1
  $tc'Game :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9511289802424421550##
                   9285366058118558912##
                   BreakoutGame.$trModule
                   BreakoutGame.$tc'Game1) -}
da815f20a1824184f4b3d9593a22ecc5
  $tc'Game1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Game"#) -}
9aa88d030d39ec93b748c9421fda4e55
  $tcBreakoutGame :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   506097137606510408##
                   5544297193368544398##
                   BreakoutGame.$trModule
                   BreakoutGame.$trModule1) -}
41e2cb952d27b0179d197c69bbfaf086
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   BreakoutGame.$trModule2
                   BreakoutGame.$trModule1) -}
7345dac871e18a970997fbec5d3883d0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BreakoutGame"#) -}
9310026e9c33e8c398f6a822dca361c7
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "breakout-0.1.0.0-KalZ2SmhAcs6JDFHIhjRIs"#) -}
bd8ebe731f797a71d28d607ac9ae90b0
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> (GHC.Types.Float, GHC.Types.Float)
    -> (GHC.Types.Float, GHC.Types.Float)
    -> (GHC.Types.Float, GHC.Types.Float)
    -> GHC.Types.Float
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> [(GHC.Types.Float, GHC.Types.Float)]
    -> GHC.Show.ShowS
  {- Arity: 8,
     Strictness: <S,U><L,U(U(U),U(U))><L,U(U(U),U(U))><L,U(U(U),U(U))><L,1*U(U)><L,U><L,U><L,U>,
     Inline: [0] -}
53f0b20425bfcfef11dc221fb7a20a00
  data BreakoutGame
    = Game {ballLoc :: (GHC.Types.Float, GHC.Types.Float),
            ballVel :: (GHC.Types.Float, GHC.Types.Float),
            paddle :: (GHC.Types.Float, GHC.Types.Float),
            paddleVel :: GHC.Types.Float,
            keyLeft :: GHC.Types.Bool,
            keyRight :: GHC.Types.Bool,
            blocks :: [(GHC.Types.Float, GHC.Types.Float)]}
74ad54c46b27dcdd226d99bf90e73e08
  ballLoc ::
    BreakoutGame.BreakoutGame -> (GHC.Types.Float, GHC.Types.Float)
  RecSel Left BreakoutGame.BreakoutGame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U(U,U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BreakoutGame.BreakoutGame) ->
                 case ds of wild { BreakoutGame.Game ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds1 }) -}
576d954084007364692930bfdeaa6c1e
  ballVel ::
    BreakoutGame.BreakoutGame -> (GHC.Types.Float, GHC.Types.Float)
  RecSel Left BreakoutGame.BreakoutGame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U(U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BreakoutGame.BreakoutGame) ->
                 case ds of wild { BreakoutGame.Game ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
3a2d2fd7e264a113313240b89f7d95cf
  blocks ::
    BreakoutGame.BreakoutGame -> [(GHC.Types.Float, GHC.Types.Float)]
  RecSel Left BreakoutGame.BreakoutGame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BreakoutGame.BreakoutGame) ->
                 case ds of wild { BreakoutGame.Game ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
f057daf7df7f0310f9a5f01b547402b8
  keyLeft :: BreakoutGame.BreakoutGame -> GHC.Types.Bool
  RecSel Left BreakoutGame.BreakoutGame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BreakoutGame.BreakoutGame) ->
                 case ds of wild { BreakoutGame.Game ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
aa023ffacfd18aa8a7f2d0a71bd69788
  keyRight :: BreakoutGame.BreakoutGame -> GHC.Types.Bool
  RecSel Left BreakoutGame.BreakoutGame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BreakoutGame.BreakoutGame) ->
                 case ds of wild { BreakoutGame.Game ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
009e881bcb546e8d88787319b2570671
  paddle ::
    BreakoutGame.BreakoutGame -> (GHC.Types.Float, GHC.Types.Float)
  RecSel Left BreakoutGame.BreakoutGame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U(U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BreakoutGame.BreakoutGame) ->
                 case ds of wild { BreakoutGame.Game ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
7596d29849a914601d0b93d5fef22c1b
  paddleVel :: BreakoutGame.BreakoutGame -> GHC.Types.Float
  RecSel Left BreakoutGame.BreakoutGame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BreakoutGame.BreakoutGame) ->
                 case ds of wild { BreakoutGame.Game ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
instance [safe] GHC.Show.Show [BreakoutGame.BreakoutGame]
  = BreakoutGame.$fShowBreakoutGame
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

